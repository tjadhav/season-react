{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","iconName","message","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Loader","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","src_SeasonDisplay_0","src_Loader","getRenderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACnBC,OAAQ,CACNC,SAAU,MACVC,QAAS,gBAEXC,OAAQ,CACNF,SAAU,YACVC,QAAS,kBAyBEE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIDK,EAECZ,EAAaS,GAAnCN,EAFqBS,EAErBT,QAASD,EAFYU,EAEZV,SAEjB,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,0BAAAC,OAA4Bf,KACxCW,EAAAC,EAAAC,cAAA,UAAKZ,GACLU,EAAAC,EAAAC,cAAA,KAAGC,UAAS,2BAAAC,OAA6Bf,OC5BzCgB,EAAS,SAACZ,GACd,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAMH,WAKjDe,EAAOC,aAAe,CACpBhB,QAAS,cAGIe,QCRTE,6MACJC,MAAQ,CAAEd,IAAK,KAAMe,aAAc,uFAEf,IAAAC,EAAAC,KAClBC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIN,EAAKO,SAAS,CAAEvB,IAAKsB,EAASE,OAAOC,YACjD,SAAAC,GAAK,OAAIV,EAAKO,SAAS,CAAER,aAAcW,EAAM9B,uDAa/C,OAAIqB,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMd,IAClCM,EAAAC,EAAAC,cAAA,qBAAaS,KAAKH,MAAMC,eAE5BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMd,IAClCM,EAAAC,EAAAC,cAACmB,EAAD,CAAe3B,IAAKiB,KAAKH,MAAMd,MAGjCM,EAAAC,EAAAC,cAACoB,EAAD,CAAQhC,QAAQ,oEAGvB,OAAOU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,KAAKY,2BA7B1BC,IAAMC,WAiCxBC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.3e75ef0f.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    iconName: \"sun\",\n    message: \"It's Summer!\"\n  },\n  winter: {\n    iconName: \"snowflake\",\n    message: \"It's Winter!\"\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { message, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive icon ${iconName}`} />\n      <h1>{message}</h1>\n      <i className={`icon-right massive icon ${iconName}`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Loader = (props) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n}\n\nLoader.defaultProps = {\n  message: \"Loading...\"\n};\n\nexport default Loader;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loader from \"./Loader\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: \"\" };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }),\n      error => this.setState({ errorMessage: error.message })\n    );\n  }\n\n  // componentDidUpdate() {\n  //   console.log(\"Component Updated\");\n  // }\n\n  // componentWillUnmount() {\n  //   console.log(\"Compononet will be unmount\");\n  // }\n\n  getRenderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n\n    return <Loader message=\"Please accept location request\" />;\n  }\n  render() {\n    return <div className=\"container\">{this.getRenderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}